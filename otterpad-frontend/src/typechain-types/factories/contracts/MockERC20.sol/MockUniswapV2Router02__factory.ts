/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockUniswapV2Router02,
  MockUniswapV2Router02Interface,
} from "../../../contracts/MockERC20.sol/MockUniswapV2Router02";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountADesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBDesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100155760b6908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c63e8e3370014602857600080fd5b34607c57610100366003190112607c576001600160a01b0360043581811603607857602435818116036078576044359060c435908116036078576060925080825260643560208301526040820152f35b8280fd5b5080fdfea2646970667358221220ea8a4ea1ab1c61b9e0eee6e9af27c52f14ea9edc7059b5aaf234c65690be3d5d64736f6c63430008180033";

type MockUniswapV2Router02ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniswapV2Router02ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniswapV2Router02__factory extends ContractFactory {
  constructor(...args: MockUniswapV2Router02ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockUniswapV2Router02 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockUniswapV2Router02__factory {
    return super.connect(runner) as MockUniswapV2Router02__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniswapV2Router02Interface {
    return new Interface(_abi) as MockUniswapV2Router02Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockUniswapV2Router02 {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockUniswapV2Router02;
  }
}
