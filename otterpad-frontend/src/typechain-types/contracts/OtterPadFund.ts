/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OtterPadFundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BPS_FACTOR"
      | "OTTERPAD_DAO"
      | "OTTERPAD_FEE_BPS"
      | "buy"
      | "calculateRemainingAmount"
      | "calculateTokensReceived"
      | "checkSaleTokensRequired"
      | "deployToUniswap"
      | "endPrice"
      | "escrowRakeBPS"
      | "foundersWallet"
      | "getAllocation"
      | "getCurrentPrice"
      | "getEscrowedAmount"
      | "getPaymentTokenBalance"
      | "getSaleTokenBalance"
      | "getSlope"
      | "getUserOrderIndices"
      | "hasSufficientSaleTokens"
      | "isDeployedToUniswap"
      | "lockLPTokenWallet"
      | "orderCounter"
      | "paymentToken"
      | "paymentTokenDecimals"
      | "paymentTokenSymbol"
      | "purchases"
      | "recoverStuckTokens"
      | "redeem"
      | "refund"
      | "richInfoUrl"
      | "saleToken"
      | "saleTokenDecimals"
      | "saleTokenSymbol"
      | "slopeScalingFactor"
      | "startPrice"
      | "targetLiquidity"
      | "targetReached"
      | "title"
      | "totalActiveContributions"
      | "totalPaymentsIn"
      | "totalTokensAllocated"
      | "uniswapFactory"
      | "uniswapPool"
      | "uniswapRouter"
      | "upfrontRakeBPS"
      | "userOrderIndices"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeployedToUniswap"
      | "EscrowReleased"
      | "PaymentReceived"
      | "Refunded"
      | "TokensPurchased"
      | "TokensRedeemed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BPS_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OTTERPAD_DAO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OTTERPAD_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemainingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokensReceived",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSaleTokensRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployToUniswap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "escrowRakeBPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "foundersWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSlope", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserOrderIndices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSufficientSaleTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDeployedToUniswap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockLPTokenWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokenSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchases",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverStuckTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "richInfoUrl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "saleToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleTokenSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slopeScalingFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetReached",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "title", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalActiveContributions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPaymentsIn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upfrontRakeBPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userOrderIndices",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BPS_FACTOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OTTERPAD_DAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OTTERPAD_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemainingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSaleTokensRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployToUniswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowRakeBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foundersWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSlope", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserOrderIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSufficientSaleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeployedToUniswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockLPTokenWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchases", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverStuckTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "richInfoUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleTokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slopeScalingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "title", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalActiveContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPaymentsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upfrontRakeBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOrderIndices",
    data: BytesLike
  ): Result;
}

export namespace DeployedToUniswapEvent {
  export type InputTuple = [pair: AddressLike, liquidity: BigNumberish];
  export type OutputTuple = [pair: string, liquidity: bigint];
  export interface OutputObject {
    pair: string;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowReleasedEvent {
  export type InputTuple = [amount: BigNumberish, foundersWallet: AddressLike];
  export type OutputTuple = [amount: bigint, foundersWallet: string];
  export interface OutputObject {
    amount: bigint;
    foundersWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReceivedEvent {
  export type InputTuple = [
    purchaser: AddressLike,
    recipient: AddressLike,
    totalAmount: BigNumberish,
    otterpadFee: BigNumberish,
    upfrontAmount: BigNumberish,
    escrowAmount: BigNumberish,
    contributionAmount: BigNumberish
  ];
  export type OutputTuple = [
    purchaser: string,
    recipient: string,
    totalAmount: bigint,
    otterpadFee: bigint,
    upfrontAmount: bigint,
    escrowAmount: bigint,
    contributionAmount: bigint
  ];
  export interface OutputObject {
    purchaser: string;
    recipient: string;
    totalAmount: bigint;
    otterpadFee: bigint;
    upfrontAmount: bigint;
    escrowAmount: bigint;
    contributionAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [
    purchaser: AddressLike,
    contributionAmount: BigNumberish,
    orderIndex: BigNumberish,
    netActiveContributions: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    purchaser: string,
    contributionAmount: bigint,
    orderIndex: bigint,
    netActiveContributions: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    purchaser: string;
    contributionAmount: bigint;
    orderIndex: bigint;
    netActiveContributions: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensPurchasedEvent {
  export type InputTuple = [
    purchaser: AddressLike,
    recipient: AddressLike,
    paymentAmount: BigNumberish,
    contributionAmount: BigNumberish,
    tokenAmount: BigNumberish,
    orderIndex: BigNumberish,
    netActiveContributions: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    purchaser: string,
    recipient: string,
    paymentAmount: bigint,
    contributionAmount: bigint,
    tokenAmount: bigint,
    orderIndex: bigint,
    netActiveContributions: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    purchaser: string;
    recipient: string;
    paymentAmount: bigint;
    contributionAmount: bigint;
    tokenAmount: bigint;
    orderIndex: bigint;
    netActiveContributions: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensRedeemedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    tokenAmount: BigNumberish,
    orderIndex: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    tokenAmount: bigint,
    orderIndex: bigint
  ];
  export interface OutputObject {
    recipient: string;
    tokenAmount: bigint;
    orderIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OtterPadFund extends BaseContract {
  connect(runner?: ContractRunner | null): OtterPadFund;
  waitForDeployment(): Promise<this>;

  interface: OtterPadFundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BPS_FACTOR: TypedContractMethod<[], [bigint], "view">;

  OTTERPAD_DAO: TypedContractMethod<[], [string], "view">;

  OTTERPAD_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  buy: TypedContractMethod<
    [paymentAmount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  calculateRemainingAmount: TypedContractMethod<[], [bigint], "view">;

  calculateTokensReceived: TypedContractMethod<
    [paymentAmount: BigNumberish],
    [bigint],
    "view"
  >;

  checkSaleTokensRequired: TypedContractMethod<
    [],
    [[bigint, bigint, bigint]],
    "view"
  >;

  deployToUniswap: TypedContractMethod<[], [string], "nonpayable">;

  endPrice: TypedContractMethod<[], [bigint], "view">;

  escrowRakeBPS: TypedContractMethod<[], [bigint], "view">;

  foundersWallet: TypedContractMethod<[], [string], "view">;

  getAllocation: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getCurrentPrice: TypedContractMethod<[], [bigint], "view">;

  getEscrowedAmount: TypedContractMethod<[], [bigint], "view">;

  getPaymentTokenBalance: TypedContractMethod<[], [bigint], "view">;

  getSaleTokenBalance: TypedContractMethod<[], [bigint], "view">;

  getSlope: TypedContractMethod<[], [bigint], "view">;

  getUserOrderIndices: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  hasSufficientSaleTokens: TypedContractMethod<[], [boolean], "view">;

  isDeployedToUniswap: TypedContractMethod<[], [boolean], "view">;

  lockLPTokenWallet: TypedContractMethod<[], [string], "view">;

  orderCounter: TypedContractMethod<[], [bigint], "view">;

  paymentToken: TypedContractMethod<[], [string], "view">;

  paymentTokenDecimals: TypedContractMethod<[], [bigint], "view">;

  paymentTokenSymbol: TypedContractMethod<[], [string], "view">;

  purchases: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        paymentAmount: bigint;
        contributionAmount: bigint;
        tokenAmount: bigint;
        purchaser: string;
        recipient: string;
        isRefunded: boolean;
        isRedeemed: boolean;
        purchaseBlock: bigint;
        orderIndex: bigint;
      }
    ],
    "view"
  >;

  recoverStuckTokens: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  redeem: TypedContractMethod<[orderIndex: BigNumberish], [void], "nonpayable">;

  refund: TypedContractMethod<[orderIndex: BigNumberish], [void], "nonpayable">;

  richInfoUrl: TypedContractMethod<[], [string], "view">;

  saleToken: TypedContractMethod<[], [string], "view">;

  saleTokenDecimals: TypedContractMethod<[], [bigint], "view">;

  saleTokenSymbol: TypedContractMethod<[], [string], "view">;

  slopeScalingFactor: TypedContractMethod<[], [bigint], "view">;

  startPrice: TypedContractMethod<[], [bigint], "view">;

  targetLiquidity: TypedContractMethod<[], [bigint], "view">;

  targetReached: TypedContractMethod<[], [boolean], "view">;

  title: TypedContractMethod<[], [string], "view">;

  totalActiveContributions: TypedContractMethod<[], [bigint], "view">;

  totalPaymentsIn: TypedContractMethod<[], [bigint], "view">;

  totalTokensAllocated: TypedContractMethod<[], [bigint], "view">;

  uniswapFactory: TypedContractMethod<[], [string], "view">;

  uniswapPool: TypedContractMethod<[], [string], "view">;

  uniswapRouter: TypedContractMethod<[], [string], "view">;

  upfrontRakeBPS: TypedContractMethod<[], [bigint], "view">;

  userOrderIndices: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BPS_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OTTERPAD_DAO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OTTERPAD_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [paymentAmount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateRemainingAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateTokensReceived"
  ): TypedContractMethod<[paymentAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkSaleTokensRequired"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "deployToUniswap"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "endPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "escrowRakeBPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "foundersWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllocation"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEscrowedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPaymentTokenBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSaleTokenBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSlope"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserOrderIndices"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasSufficientSaleTokens"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDeployedToUniswap"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockLPTokenWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "orderCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentTokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "paymentTokenSymbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchases"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        paymentAmount: bigint;
        contributionAmount: bigint;
        tokenAmount: bigint;
        purchaser: string;
        recipient: string;
        isRefunded: boolean;
        isRedeemed: boolean;
        purchaseBlock: bigint;
        orderIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recoverStuckTokens"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<[orderIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[orderIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "richInfoUrl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "saleToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "saleTokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "saleTokenSymbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "slopeScalingFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetReached"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "title"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalActiveContributions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPaymentsIn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTokensAllocated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "uniswapFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upfrontRakeBPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userOrderIndices"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "DeployedToUniswap"
  ): TypedContractEvent<
    DeployedToUniswapEvent.InputTuple,
    DeployedToUniswapEvent.OutputTuple,
    DeployedToUniswapEvent.OutputObject
  >;
  getEvent(
    key: "EscrowReleased"
  ): TypedContractEvent<
    EscrowReleasedEvent.InputTuple,
    EscrowReleasedEvent.OutputTuple,
    EscrowReleasedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReceived"
  ): TypedContractEvent<
    PaymentReceivedEvent.InputTuple,
    PaymentReceivedEvent.OutputTuple,
    PaymentReceivedEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;
  getEvent(
    key: "TokensPurchased"
  ): TypedContractEvent<
    TokensPurchasedEvent.InputTuple,
    TokensPurchasedEvent.OutputTuple,
    TokensPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "TokensRedeemed"
  ): TypedContractEvent<
    TokensRedeemedEvent.InputTuple,
    TokensRedeemedEvent.OutputTuple,
    TokensRedeemedEvent.OutputObject
  >;

  filters: {
    "DeployedToUniswap(address,uint256)": TypedContractEvent<
      DeployedToUniswapEvent.InputTuple,
      DeployedToUniswapEvent.OutputTuple,
      DeployedToUniswapEvent.OutputObject
    >;
    DeployedToUniswap: TypedContractEvent<
      DeployedToUniswapEvent.InputTuple,
      DeployedToUniswapEvent.OutputTuple,
      DeployedToUniswapEvent.OutputObject
    >;

    "EscrowReleased(uint256,address)": TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;
    EscrowReleased: TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;

    "PaymentReceived(address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;
    PaymentReceived: TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;

    "Refunded(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;

    "TokensPurchased(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
    TokensPurchased: TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;

    "TokensRedeemed(address,uint256,uint256)": TypedContractEvent<
      TokensRedeemedEvent.InputTuple,
      TokensRedeemedEvent.OutputTuple,
      TokensRedeemedEvent.OutputObject
    >;
    TokensRedeemed: TypedContractEvent<
      TokensRedeemedEvent.InputTuple,
      TokensRedeemedEvent.OutputTuple,
      TokensRedeemedEvent.OutputObject
    >;
  };
}
