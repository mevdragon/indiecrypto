/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PresaleLockFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "createPresaleLock" | "lockCounterIndex" | "locks"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LockCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createPresaleLock",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCounterIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "locks", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "createPresaleLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockCounterIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locks", data: BytesLike): Result;
}

export namespace LockCreatedEvent {
  export type InputTuple = [
    lockIndex: BigNumberish,
    lock: AddressLike,
    title: string,
    foundersWallet: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    lockIndex: bigint,
    lock: string,
    title: string,
    foundersWallet: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    lockIndex: bigint;
    lock: string;
    title: string;
    foundersWallet: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PresaleLockFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PresaleLockFactory;
  waitForDeployment(): Promise<this>;

  interface: PresaleLockFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPresaleLock: TypedContractMethod<
    [title: string, foundersWallet: AddressLike],
    [string],
    "nonpayable"
  >;

  lockCounterIndex: TypedContractMethod<[], [bigint], "view">;

  locks: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPresaleLock"
  ): TypedContractMethod<
    [title: string, foundersWallet: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockCounterIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "locks"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "LockCreated"
  ): TypedContractEvent<
    LockCreatedEvent.InputTuple,
    LockCreatedEvent.OutputTuple,
    LockCreatedEvent.OutputObject
  >;

  filters: {
    "LockCreated(uint256,address,string,address,uint256)": TypedContractEvent<
      LockCreatedEvent.InputTuple,
      LockCreatedEvent.OutputTuple,
      LockCreatedEvent.OutputObject
    >;
    LockCreated: TypedContractEvent<
      LockCreatedEvent.InputTuple,
      LockCreatedEvent.OutputTuple,
      LockCreatedEvent.OutputObject
    >;
  };
}
